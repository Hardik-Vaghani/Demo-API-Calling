implementation 'com.squareup.retrofit2:retrofit:2.9.0'
implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
implementation 'com.squareup.okhttp3:okhttp:4.9.3'

import okhttp3.MultipartBody
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.http.Multipart
import retrofit2.http.POST
import retrofit2.http.Part
import retrofit2.http.Path

interface ApiService {
    @Multipart
    @POST("users/{userId}/upload")
    fun uploadImage(
        @Path("userId") userId: Int,
        @Part image: MultipartBody.Part,
        @Part("description") description: RequestBody
    ): Call<ResponseBody>
}

import android.net.Uri
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.File

fun uploadImageToUser(userId: Int, imageUri: Uri, descriptionText: String) {
    val file = File(imageUri.path ?: return)
    val requestFile = RequestBody.create("image/*".toMediaTypeOrNull(), file)
    val body = MultipartBody.Part.createFormData("image", file.name, requestFile)
    val description = RequestBody.create("text/plain".toMediaTypeOrNull(), descriptionText)

    RetrofitClient.apiService.uploadImage(userId, body, description).enqueue(object : Callback<ResponseBody> {
        override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
            if (response.isSuccessful) {
                // Handle success
                println("Upload successful: ${response.body()?.string()}")
            } else {
                // Handle failure
                println("Upload failed: ${response.errorBody()?.string()}")
            }
        }

        override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
            // Handle error
            println("Error: ${t.message}")
        }
    })
}